# Importando as bibliotecas
import socket
import os

# Definindo o IP do servidor
HOST = ''

# Definindo a porta
PORT = 50004

# Tamanho maximo de um arquivo
MAX_SIZE = 4294967296

# status 404 arquivo nao encontrado
STATUS_NOT_FOUND = '404'

# status 400 requisicao invalida
STATUS_BAD = '400'

# status 302 arquivo encontrado
STATUS_FOUND = '302'

# status 200 ok
STATUS_OK = '200'

# status 201 LS OK
STATUS_LS = '201'

# status 202, esperando o nome do arquivo
STATUS_RCV = '202'

# Comandos para listar os arquivos
CMD_LS = 'LS'

# Comando para enviar
CMD_GET = 'GET'

# Retorna uma lista com os arquivos disponiveis na pasta de
def listar_arquivos():
    # Obtendo o diretório corrente
    strDiretorio = os.path.abspath(__file__)
    strDiretorio = os.path.dirname(strDiretorio)
    strDiretorio = strDiretorio + '/arquivos/'

    result = ' '
    for arq in os.listdir(strDiretorio):
        result += arq + ' '

    return result

    #   print('\033[32m' +  i + '\033[0;0m'


# Criando o socket TCP
tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Ligando o socket a porta
tcp_socket.bind((HOST, PORT))

# Máximo de conexões enfileiradas
tcp_socket.listen(1)

print('Servidor iniciado...\n\n')

while True:

    print('Esperando uma nova conexao')

    # Aceita a conexão com o cliente
    con, cliente = tcp_socket.accept()
    print('Conectado por: ', cliente)

    while True:
        # Espera o primeiro comando
        cmd = con.recv(5)
        cmd = cmd.decode('utf-8')

        if cmd == CMD_LS:
            print('LS')
            # Cria uma string com o nome dos arquivos
            lista = listar_arquivos()

            # envia um ok para o cliente
            con.sendall(STATUS_LS.encode('utf-8'))

            # Envia a lista de arquivos existentes
            con.sendall(lista.encode('utf-8'))

        # Enviar arquivo
        elif cmd == CMD_GET:
            print('GET')

            # envia um GET
            con.sendall(STATUS_RCV.encode('utf-8'))

            # recebe o nome do arquivo a ser enviado
            nomeArq = con.recv(1024)
            nomeArq = nomeArq.decode('utf-8')
            print(nomeArq)
            try:
                strDiretorio = os.path.abspath(__file__)
                strDiretorio = os.path.dirname(strDiretorio)
                strDiretorio = strDiretorio + '/arquivos/' + nomeArq

                nomeArq = os.path.relpath(strDiretorio)
                print(nomeArq)
                fd = open(nomeArq, 'rb')

                data = fd.read(MAX_SIZE)
                print(data)
                con.sendall(data)

            except FileNotFoundError:
                print('pedido de arquivo inexistente')
                con.sendall(STATUS_NOT_FOUND.encode('utf-8'))
                continue


        else:
            print('BAD REQUEST', cliente)
            con.sendall(STATUS_BAD.encode('utf-8'))

        # Imprimindo a mensagem recebida convertendo de bytes para string
        # print(cliente, msg)

# THE END
con.close()

